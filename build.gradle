plugins {
    id 'fabric-loom' version '1.1-SNAPSHOT'
    id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.1.1'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "+mc" + project.minecraft_version
group = project.maven_group

repositories {
	mavenLocal()
	maven {
		name "Fabric"
		url "https://maven.fabricmc.net/"
	}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven {
		name "Siphalor's Maven"
		url "https://maven.siphalor.de/"
	}
	maven { url "https://jitpack.io" }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_build}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	def fabric_deps = [
	        'fabric-api-base',
            'fabric-events-interaction-v0',
			'fabric-item-api-v1',
			'fabric-lifecycle-events-v1',
			'fabric-key-binding-api-v1',
            'fabric-networking-api-v1',
			'fabric-resource-loader-v0',
			'fabric-registry-sync-v0'
	]
	fabric_deps.forEach { include(modImplementation(fabricApi.module(it, fabric_api_version)))}
	modImplementation(fabricApi.module("fabric-item-group-api-v1", fabric_api_version))

	modApi("com.terraformersmc:modmenu:6.1.0-rc.4")

	include(modApi("de.siphalor.tweed4:tweed4-base-$minecraft_major_version:1.7.1+mc1.19.4"))
	include(modApi("de.siphalor.tweed4:tweed4-annotated-$minecraft_major_version:1.3.1+mc1.19.4"))
	include(modApi("de.siphalor.tweed4:tweed4-data-$minecraft_major_version:1.2.1+mc1.19.4"))
	include(modApi("de.siphalor.tweed4:tweed4-data-hjson-$minecraft_major_version:1.1.1+mc1.19.4"))
	include(modApi("de.siphalor.tweed4:tweed4-tailor-screen-$minecraft_major_version:1.1.3+mc1.19.4")) {
		exclude module: "modmenu"
	}
	include(modApi("de.siphalor.tweed4:tweed4-tailor-coat-$minecraft_major_version:1.1.3+mc1.19.4")) {
		exclude module: "modmenu"
	}
	include(modApi("de.siphalor:coat-$minecraft_major_version:$coat_version")) {
		exclude module: "modmenu"
	}

	modImplementation(include("de.siphalor:amecsapi-$minecraft_major_version:${project.amecs_version}")) {
		exclude group: "net.fabricmc.fabric-api"
	}
}

//sourceSets.main.java.exclude("**/ModMenu*")

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
    inputs.property "version", version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project.archives_base_name}-${project.minecraft_major_version}"

			from components.java
			java.withSourcesJar()
        }
    }

    // select the repositories you want to publish to
    repositories {
        if (project.hasProperty("siphalorMavenUser")) {
            maven {
                name = "Siphalor"
                url = "https://maven.siphalor.de/upload.php"
                credentials {
                    username = siphalorMavenUser
                    password = siphalorMavenPassword
                }
            }
        }
    }
}

// Mod sites


static def getChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

task uploadToModSites {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("curseforgeToken")) {
	curseforge {
		apiKey project.curseforgeToken
		project {
			id = "317514"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = project.getChangelog()
			addGameVersion("Fabric")
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				embeddedLibrary "fabric-api"
				embeddedLibrary "amecs"
				embeddedLibrary "tweed-api"
				optionalDependency "modmenu"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

modrinth {
	if (project.hasProperty("modrinthToken")) {
		token = project.modrinthToken
		uploadToModSites.finalizedBy(tasks.modrinth)
	}

	projectId = "u5Ic2U1u"
	versionName = "[$project.mod_mc_version_specifier] $project.mod_version"
	versionType = project.mod_release
	changelog = project.getChangelog()
	uploadFile = remapJar
	gameVersions = project.mod_mc_versions.split(";") as List<String>
	loaders = ["fabric"]
}
tasks.modrinth.group = "upload"

if (project.hasProperty("githubToken")) {
	githubRelease {
		token project.githubToken
		targetCommitish = "unstable"
		releaseName = "Version $project.mod_version for $project.mod_mc_version_specifier"
		body = project.getChangelog()
		releaseAssets remapJar.getArchiveFile()
		prerelease = mod_release != "release"
		overwrite = true
	}
	uploadToModSites.finalizedBy(tasks.githubRelease)
}
